from machine import Pin, I2C
from pico_car import pico_car, ws2812b, SSD1306_I2C, ultrasonic
import time
from random import choice as chs


ultrasonic = ultrasonic()
Motor = pico_car()

num_leds = 8  # Number of NeoPixels
# Pin where NeoPixels are connected
pixels = ws2812b(num_leds, 0)

# Set all led off
pixels.fill(0,0,0)
pixels.show()

#initialization oled
i2c=I2C(1, scl=Pin(15),sda=Pin(14), freq=100000)
oled = SSD1306_I2C(128, 32, i2c)

#initialization ADC
Quantity_of_electricity = machine.ADC(28)
#Machine.ADC(28) addres6s for ADC for elec

#Define the tracking sensor, 1-4 from left to right
#recognize that black is 0 and white is 1
#Tracing_1 Tracing_2 Tracing_3 Tracing_4
#    2         3        4          5     
Tracing_1 = machine.Pin(2, machine.Pin.IN)
Tracing_2 = machine.Pin(3, machine.Pin.IN)
Tracing_3 = machine.Pin(4, machine.Pin.IN)
Tracing_4 = machine.Pin(5, machine.Pin.IN)

while True:
    #get distance
    distance = ultrasonic.Distance_accurate()
    print("distance is %d cm"%(distance) )
    #display distance
    oled.text('Distance:', 0, 0)
    oled.text(str(distance), 75, 0)
    oled.show()
    oled.fill(0)
    #Display power on OLED
    #Under 20000, there is no power at all
    oled.text ('Battery:', 0, 20)
    oled.text(str(Quantity_of_electricity.read_u16()), 70, 20)
    oled.show()
    oled.fill(0)
    
    if distance <= 20:
        Motor.Car_Stop()
        continue
    
    #Four channel tracking pin level status
    # 0 0 0 X
    elif Tracing_1.value() == 0 and Tracing_2.value() == 0:
        for i in range(num_leds):
            pixels.set_pixel(i,255,0,0)
        oled.text('Cliff', 0, 10)
        Motor.Car_Back(150,150)
        time.sleep(0.5)
        Motor.Car_Right(150,150)
        time.sleep(0.5)
        #time.sleep(0.08)
        
    #Four channel tracking pin level status
    # X 0 0 0
    elif Tracing_3.value() == 0 and Tracing_4.value() == 0:
        for i in range(num_leds):
            pixels.set_pixel(i,255,0,0)
        oled.text('Cliff', 0, 10)
        Motor.Car_Back(150,150)
        time.sleep(0.5)
        Motor.Car_Left(150,150)
        time.sleep(0.5)
        #time.sleep(0.08)
      
    else:
        Motor.Car_Run(80,80)
        for i in range(num_leds):
            pixels.set_pixel(i,255,255,255)
        oled.fill(0)
        oled.text('Running', 0, 10)
        
    pixels.show()
    oled.show()
#In other cases, the trolley keeps the previous trolley running
